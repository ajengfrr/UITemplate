// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using PreProc.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace PreProc.Models
{
    public partial class PreProcContext
    {
        private IPreProcContextProcedures _procedures;

        public virtual IPreProcContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PreProcContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPreProcContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<sp_GetCustomerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetEmpDomainNameByNIPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_getEmployeeEmailByCurrentUnitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetEmployeeswithParamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_GetProjectNameByPIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_getProjectSupportByAMDomainResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_ReminderPendingBillingReason_DetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_GetDetailIDByStockReqIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_GetDO_DataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_GetIDNewResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_GetPO_DataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_GetPOPerStockReqResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_GetReminderDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_IsValidToInsertDODetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_IsValidToInsertPODetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_IsValidToInsertPOHeaderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_IsValidToInsertStockReqResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_IsValidToInsertStockReqDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_StockReq_PODetailsByStockReqIDResult>().HasNoKey().ToView(null);
        }
    }

    public partial class PreProcContextProcedures : IPreProcContextProcedures
    {
        private readonly PreProcContext _context;

        public PreProcContextProcedures(PreProcContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_GetCustomerResult>> sp_GetCustomerAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetCustomerResult>("EXEC @returnValue = [dbo].[sp_GetCustomer]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetEmpDomainNameByNIPResult>> sp_GetEmpDomainNameByNIPAsync(string NIP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NIP",
                    Size = 15,
                    Value = NIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetEmpDomainNameByNIPResult>("EXEC @returnValue = [dbo].[sp_GetEmpDomainNameByNIP] @NIP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_getEmployeeEmailByCurrentUnitResult>> sp_getEmployeeEmailByCurrentUnitAsync(string currentUnit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "currentUnit",
                    Size = 5,
                    Value = currentUnit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_getEmployeeEmailByCurrentUnitResult>("EXEC @returnValue = [dbo].[sp_getEmployeeEmailByCurrentUnit] @currentUnit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetEmployeeswithParamResult>> sp_GetEmployeeswithParamAsync(string Kode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Kode",
                    Size = 510,
                    Value = Kode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetEmployeeswithParamResult>("EXEC @returnValue = [dbo].[sp_GetEmployeeswithParam] @Kode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_GetProjectNameByPIDResult>> sp_GetProjectNameByPIDAsync(string ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Size = 50,
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_GetProjectNameByPIDResult>("EXEC @returnValue = [dbo].[sp_GetProjectNameByPID] @ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_getProjectSupportByAMDomainResult>> sp_getProjectSupportByAMDomainAsync(string AMDomain, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AMDomain",
                    Size = 255,
                    Value = AMDomain ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_getProjectSupportByAMDomainResult>("EXEC @returnValue = [dbo].[sp_getProjectSupportByAMDomain] @AMDomain", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_ReminderPendingBillingReason_DetailResult>> sp_ReminderPendingBillingReason_DetailAsync(string AMEmail, DateTime? ReasonDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AMEmail",
                    Size = 255,
                    Value = AMEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReasonDate",
                    Value = ReasonDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_ReminderPendingBillingReason_DetailResult>("EXEC @returnValue = [dbo].[sp_ReminderPendingBillingReason_Detail] @AMEmail, @ReasonDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_GetDetailIDByStockReqIDResult>> sp_StockReq_GetDetailIDByStockReqIDAsync(string StockReqID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockReqID",
                    Size = 25,
                    Value = StockReqID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_GetDetailIDByStockReqIDResult>("EXEC @returnValue = [dbo].[sp_StockReq_GetDetailIDByStockReqID] @StockReqID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_GetDO_DataResult>> sp_StockReq_GetDO_DataAsync(string PID, string PONumber, string NKS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PID",
                    Size = 25,
                    Value = PID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PONumber",
                    Size = 25,
                    Value = PONumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NKS",
                    Size = 50,
                    Value = NKS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_GetDO_DataResult>("EXEC @returnValue = [dbo].[sp_StockReq_GetDO_Data] @PID, @PONumber, @NKS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_GetIDNewResult>> sp_StockReq_GetIDNewAsync(string StockReqID, string NKS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockReqID",
                    Size = 25,
                    Value = StockReqID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NKS",
                    Size = 25,
                    Value = NKS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_GetIDNewResult>("EXEC @returnValue = [dbo].[sp_StockReq_GetIDNew] @StockReqID, @NKS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_GetPO_DataResult>> sp_StockReq_GetPO_DataAsync(string StockReqID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockReqID",
                    Size = 25,
                    Value = StockReqID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_GetPO_DataResult>("EXEC @returnValue = [dbo].[sp_StockReq_GetPO_Data] @StockReqID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_GetPOPerStockReqResult>> sp_StockReq_GetPOPerStockReqAsync(string StockReqID, string NKS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockReqID",
                    Size = 25,
                    Value = StockReqID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NKS",
                    Size = 25,
                    Value = NKS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_GetPOPerStockReqResult>("EXEC @returnValue = [dbo].[sp_StockReq_GetPOPerStockReq] @StockReqID, @NKS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_GetReminderDetailResult>> sp_StockReq_GetReminderDetailAsync(string StockReqID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockReqID",
                    Size = 25,
                    Value = StockReqID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_GetReminderDetailResult>("EXEC @returnValue = [dbo].[sp_StockReq_GetReminderDetail] @StockReqID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_IsValidToInsertDODetailResult>> sp_StockReq_IsValidToInsertDODetailAsync(int? DetailID, string NKS, int? HeaderID, string DONumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailID",
                    Value = DetailID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NKS",
                    Size = 25,
                    Value = NKS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HeaderID",
                    Value = HeaderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DONumber",
                    Size = 25,
                    Value = DONumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_IsValidToInsertDODetailResult>("EXEC @returnValue = [dbo].[sp_StockReq_IsValidToInsertDODetail] @DetailID, @NKS, @HeaderID, @DONumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_IsValidToInsertPODetailResult>> sp_StockReq_IsValidToInsertPODetailAsync(int? HeaderID, string NKS, string PIDFull, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HeaderID",
                    Value = HeaderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NKS",
                    Size = 25,
                    Value = NKS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PIDFull",
                    Size = 50,
                    Value = PIDFull ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_IsValidToInsertPODetailResult>("EXEC @returnValue = [dbo].[sp_StockReq_IsValidToInsertPODetail] @HeaderID, @NKS, @PIDFull", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_IsValidToInsertPOHeaderResult>> sp_StockReq_IsValidToInsertPOHeaderAsync(int? DetailID, int? PONumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DetailID",
                    Value = DetailID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PONumber",
                    Value = PONumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_IsValidToInsertPOHeaderResult>("EXEC @returnValue = [dbo].[sp_StockReq_IsValidToInsertPOHeader] @DetailID, @PONumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_IsValidToInsertStockReqResult>> sp_StockReq_IsValidToInsertStockReqAsync(string StockReqID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockReqID",
                    Size = 25,
                    Value = StockReqID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_IsValidToInsertStockReqResult>("EXEC @returnValue = [dbo].[sp_StockReq_IsValidToInsertStockReq] @StockReqID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_IsValidToInsertStockReqDetailResult>> sp_StockReq_IsValidToInsertStockReqDetailAsync(string ST_ID, string NKS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ST_ID",
                    Size = 25,
                    Value = ST_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NKS",
                    Size = 255,
                    Value = NKS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_IsValidToInsertStockReqDetailResult>("EXEC @returnValue = [dbo].[sp_StockReq_IsValidToInsertStockReqDetail] @ST_ID, @NKS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_StockReq_PODetailsByStockReqIDResult>> sp_StockReq_PODetailsByStockReqIDAsync(string StockReqID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockReqID",
                    Size = 25,
                    Value = StockReqID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_StockReq_PODetailsByStockReqIDResult>("EXEC @returnValue = [dbo].[sp_StockReq_PODetailsByStockReqID] @StockReqID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
